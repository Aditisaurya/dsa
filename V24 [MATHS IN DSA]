Q10
Given an integer n, return the number of prime numbers that are strictly less than n.

class Solution {
    bool isPrime(int n){
        if(n<=1){
            return false;
        }
        for(int i=0; i<n; i++){
            if(n%i==0){
                return false;
            }
        }
        return true;
    }
public:
    int countPrimes(int n) {
        int count=0;

        for(int i=2; i<n; i++){
            if(is prime(i))
            count++;
        }
        return count++;
    }
};



2ND APPROACH (LESS TIME COMPLEXITI)

class Solution {
public:
    int countPrimes(int n) {
        int count=0;
        vector<bool>prime(n+1, true);

        prime[0]=prime[1]=false;

        for(int i=2; i<n; i++){
            
            if(prime[i]){
                count++;
            

              for(int j= 2*i; j<n; j+=i){
                 prime[j]=0;
                }
            }
        }

        return count;
    }
};





Q2)
You are given a three integers 'X', 'N', and 'M'. Your task is to find ('X' ^ 'N') % 'M'. A ^ B is defined as A raised to power B and A % C is the remainder when A is divided by C.

#include <bits/stdc++.h>

int modularExponentiation(int x, int n, int m) {
	int res=1;
	  

	while(n>0){
		if(n&1){
			res=(1LL *(res) * (x)%m)%m;

		}
		x= (1LL *(x)%m *(x)%m)%m;
		n=n>>1;
	}
	return res;
}
