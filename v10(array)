Problem statement
You have been given an integer array/list(ARR) of size N. Where N is equal to [2M + 1].

Now, in the given array/list, 'M' numbers are present twice and one number is present only once.

You need to find and return that number which is unique in the array/list.

 Note:
Unique element is always present in the array/list according to the given condition.

int findUnique(int *arr, int size)
{
    int  ans= 0;
  for(int i=0; i<=size; i++)
    {
        ans=ans^arr[i];
    }
    return ans;
}

  q2
You are given an array ‘ARR’ of size ‘N’ containing each number between 1 and ‘N’ - 1 at least once. There is a single integer value that is present in the array twice. Your task is to find the duplicate integer value present in the array.

  int findDuplicate(vector<int> &arr) 
{
    int ans=0;
    for(int i=0; i<arr.size(); i++)
    {
        ans= ans^arr[i];
    }

    for (int i = 1; i < arr.size(); i++) {
        ans = ans ^ i;
    }
    return ans;
}

  































































  
