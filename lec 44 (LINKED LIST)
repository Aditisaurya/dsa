SINGLE LINKED LIST

#include <iostream>
using namespace std;
 
class Node {

    public:
    int data;
    Node* next;

    //CONSTRUCTOR
    Node(int data){
        this -> data= data;
        this -> next= NULL ;
    }

    //destructor
    ~Node(){
        int value = this -> data;
        //memory free
        if(this-> next != NULL){
            delete next;
            this->next = NULL;
        }
        cout<<"memory is free for node with data"<<value<<endl;
    }
};

void insertathead(Node * &head, int d){

    //new node create
    Node * temp = new Node(d);
    temp-> next = head;
    head = temp;

}

void insertattail(Node* &tail, int d){
     //new node create
    Node * temp = new Node(d);
    tail -> next = temp;
    tail = tail-> next;
}


void print(Node* &head){
    Node * temp = head;

    while(temp != NULL){
        cout<< temp->data <<" ";
        temp = temp -> next;
    }
    cout<< endl;
}

void insertatposition(Node* &head , int position, int d){

     // insert at start
    if(position == 1){
        insertathead(head, d);
        return;
    }


    Node* temp = head;
    int cnt =1;

    while(cnt < position - 1){
        temp = temp-> next;
        cnt++;
    }

    //inserting at last position
    if(temp-> next == NULL){
        insertattail(tail, d);
        return;
    }

    //creating a node for d
    Node* nodetoinsert = new Node(d);

    nodetoinsert -> next = temp ->next;
    temp->next = nodetoinsert;
}

void deletenode(int position, Node* &head){
     //deleting start node
     if(position==1){
        Node*temp=head;
        head= head->next;
        //memory frree
        temp->next= NULL;
        delete temp;

     }
     else{
        //deleting any mid or last node
         Node*curr = head;
         Node * prev = NULL;

         int cnt = 1;
         while(cnt<position){
            prev=curr;
            curr= curr -> next;
            cnt++;

         }
         prev->next=curr->next;
         curr->next= NULL;
         delete curr;
         
     }
}
int main(){
    //created a new node
    Node* node1 = new Node(10);
    cout<< node1 -> data <<endl; 
     cout<< node1 -> next <<endl; 

     // head poited to node1
     Node * head  = node1;
     Node * tail = node1;
     print(head);

     insertathead(head, 12);
      print(head);

      insertathead(head, 15);
      print(head);

       insertattail(tail, 25);
      print(head);

       insertatposition(head,3, 23);
      print(head);

      deletenode(1, head);
      print(head);
       
    deletenode(3, head);
      print(head);
    return 0;
}







DOUBLE LINKED LIST

#include <iostream>
using namespace std;

class Node{
    public:
    int data;
    Node * prev;
    Node * next;

    //constructor
    Node(int d){
        this->data= d;
        this-> next= NULL;
        this->prev = NULL;
    }
};

//traversing a linked list
void print(Node * head){
    Node * temp = head;

    while(temp!= NULL){
        cout<< temp -> data<< " ";
        temp = temp -> next;
    }
    cout<< endl;
}

void insertathead(Node* &head, int d){
    Node * temp = new Node(d);
    temp-> next= head;
    head -> prev = temp;
    head = temp;
}

void insertatail(Node* &tail, int d){
    Node * temp = new Node(d);
    tail-> next= temp;
    temp -> prev = tail;
    tail = temp;
}

void insertatposition(Node* &head, Node* &tail, int d, int position){
    // insert at start
    if(position == 1){
        insertathead(head, d);
        return;
    }
    
    Node* temp = head;
    int cnt =1;

    while(cnt < position - 1){
        temp = temp-> next;
        cnt++;
    }

    //inserting at last position
    if(temp-> next == NULL){
     insertatail (tail, d);
        return;
    }

      //creating a node for d
    Node* nodetoinsert = new Node(d);

    nodetoinsert -> next = temp ->next;
    temp->next -> prev = nodetoinsert;
    temp->next =nodetoinsert;
    nodetoinsert->prev = temp;
}
 


int main(){

    Node * node1 = new Node(10);
    Node* head = node1;
     Node* tail= node1;
    


    print(head);

    insertathead(head, 12);
    print(head);

    insertatail(tail, 15);
    print(head);
     
    insertatposition ( head, tail, 22 , 2);
     print(head); 

      insertatposition ( head, tail, 25 , 4);
     print(head); 


    return 0;
}





CIRCULAR LINKED LIST

#include <iostream>
using namespace std;

class Node{
    public:
    int data;
    Node* next;

    //constructor
    Node(int d){
        this->data= d;
        this->next= NULL;
    }

    //destructor
    ~Node(){
        int value= this -> data; 
        if(this->next!= NULL){
            delete next;
            next = NULL;
        }
        cout<< "memory is free"<<value<<endl;
    }

};

void insertnode(Node* &tail, int element, int d){
     //assuming that the element is present in list

     //empty list
     if(tail== NULL){
        Node* newNode= new Node(d);
        tail = newNode;
        newNode->next= newNode;
     }
      else{
        //non-empty list

        Node*curr= tail;

        while(curr -> data =! element){
            curr = curr->next;
        }

        //element found, curr is element wala node
        Node* temp = new Node(d);
        temp -> next= curr -> next;
        curr -> next = temp;  
    }
}

void print (Node* tail){

    Node* temp = tail;
    do{
        cout<< tail -> data<< " ";
        tail = tail -> next;
    }
    while(tail != temp);

    cout<<endl; 
    
  
}

int main(){

    Node* tail = NULL;
    
    //empty list me insert
    insertnode(tail, 5 , 3);
    print(tail);

    insertnode(tail, 3 , 5 );
    print(tail); 


    return 0;
}
