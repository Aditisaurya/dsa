Q1)
Given an array/list 'ARR' of integers and a position ‘M’. You have to reverse the array after that position.

void reverseArray(vector<int> &arr , int m)
{
    int s=m+ 1;
    int e=arr.size()-1;
    while(s<=e){
        swap (arr[s],arr[e]);
        s++;
        e--;
    }
}




      
Q2)
You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.

      class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n)
   {
    int i = m - 1; // Start from the end of nums1 (filled elements)
    int j = n - 1; // Start from the end of nums2
    int k = m + n - 1; // Index for the merged array (end of nums1)

    // Merge elements in descending order (larger to smaller)
    while (i >= 0 && j >= 0) {
      if (nums1[i] >= nums2[j]) {
        nums1[k--] = nums1[i--];
      }
       else
      {
        nums1[k--] = nums2[j--];
      }
    }

    // Copy remaining elements from nums2 (if any)
    while (j >= 0) {
      nums1[k--] = nums2[j--];
    }
    }

};





Q3)
Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.


class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        int nonzero=0;
        for(int j=0; j<nums.size(); j++)
        {
            if(nums[j]!=0){
                swap(nums[j],nums[nonzero]);
                nonzero++;
            }
        }
    }
};
