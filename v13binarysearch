Q1
You have been given a sorted array/list 'arr' consisting of ‘n’ elements. You are also given an integer ‘k’.
Now, your task is to find the first and last occurrence of ‘k’ in 'arr'.


int firstoccurance(vector<int>& arr, int n, int key)
{
    int s=0;
    int e= n-1;
    int mid= s+(e-s)/2;
    int ans = -1;

    while(s<=e){
   
    if(arr[mid]==key){
        ans=mid;
        e=mid-1;
        
    }
    else if(arr[mid]<key){
        s=mid+1;

    } 
    else if (arr[mid] > key) {
        e = mid - 1;
    }
    mid=s+(e-s)/2;
    }
    return ans;

}


int lastoccurance(vector<int>&arr, int n, int key)
{
    int s=0;
    int e= n-1;
    int mid= s+(e-s)/2;
    int ans = -1;

    while(s<=e){
    if(arr[mid]==key){
        ans=mid;
        s=mid+ 1;
        
    }
    else if(arr[mid]<key){
        s=mid+1;

    } else if (arr[mid] > key) {
        e = mid - 1;
    }
        mid=s+(e-s)/2;
    }
    return ans;

}

pair<int, int> firstAndLastPosition(vector<int>& arr, int n, int k)
{
    pair<int ,int>p;
    p.first = firstoccurance(arr, n, k);
    p.second=  lastoccurance(arr, n, k);
    return p;
}


  Q2
  An array arr is a mountain if the following properties hold:
arr.length >= 3
There exists some i with 0 < i < arr.length - 1 such that:
arr[0] < arr[1] < ... < arr[i - 1] < arr[i] 
arr[i] > arr[i + 1] > ... > arr[arr.length - 1]
Given a mountain array arr, return the index i such that arr[0] < arr[1] < ... < arr[i - 1] < arr[i] > arr[i + 1] > ... > arr[arr.length - 1].

class Solution {
public:
    int peakIndexInMountainArray(vector<int>& arr) {
        int s=0;
        int e= arr.size()-1;
        
        int mid= s + (e-s)/2;
        while(s<e)
        {
            if(arr[mid]<arr[mid+1])
            {
                s=mid+1;
            }
            else {
                e=mid;
            }
             mid= s + (e-s)/2;
        
            }
                    return s;
    }
};









































































  
